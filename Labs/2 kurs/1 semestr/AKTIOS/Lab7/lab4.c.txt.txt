#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void signal_handler(int signum) {
    printf("Received signal %d\n", signum);
}

int main() {
    
    pid_t pid2 = fork(); 
    if (pid2 == 0) {
        printf("Process 2 (PID: %d) created from Process 1\n", getpid());
        signal(SIGUSR1, signal_handler);
        pid_t pid3 = fork(); 
        if (pid3 == 0) {
            printf("Process 3 (PID: %d) created from Process 2\n", getpid());
            sleep(1);
            kill(getppid(), SIGUSR2); 
        } else {
            pid_t pid4 = fork(); 
            if (pid4 == 0) {
                printf("Process 4 (PID: %d) created from Process 2\n", getpid());
                sleep(1);
                kill(getppid(), SIGUSR2); 
            }
        }
    } else {
        sleep(3); 
        pid_t pid5 = fork(); 
        if (pid5 == 0) {
            printf("Process 5 (PID: %d) created from Process 4\n", getpid());
            sleep(1);
            kill(getppid(), SIGUSR1); 
        } else {
            pid_t pid6 = fork(); 
            if (pid6 == 0) {
                printf("Process 6 (PID: %d) created from Process 3\n", getpid());
                sleep(1);
                kill(getppid(), SIGUSR1); 
            } else {
                pid_t pid7 = fork(); 
                if (pid7 == 0) {
                    printf("Process 7 (PID: %d) created from Process 6\n", getpid());
                    sleep(1);
                    kill(getppid(), SIGUSR1); 
                } else {
                    pid_t pid8 = fork(); 
                    if (pid8 == 0) {
                        printf("Process 8 (PID: %d) created from Process 7\n", getpid());
                        sleep(1);
                        kill(getppid(), SIGUSR1);
                    }
                }
            }
        }
    }
    
    if (getpid() == 1) {
        sleep(1); 
        kill(2, SIGUSR1); 
    } else if (getpid() == 2) {
        sleep(1);
        kill(3, SIGUSR2); 
        kill(4, SIGUSR2);
    } else if (getpid() == 4) {
        sleep(1); 
        kill(5, SIGUSR1); 
    } else if (getpid() == 3) {
        sleep(1); 
        kill(6, SIGUSR1); 
    } else if (getpid() == 6) {
        sleep(1); 
        kill(7, SIGUSR1); 
    } else if (getpid() == 7) {
        sleep(1); 
        kill(8, SIGUSR1); 
    } else if (getpid() == 8) {
        sleep(1); 
        kill(1, SIGUSR1);
    }
    return 0;
}